apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build
  namespace: {{ .Values.application.environments.cicd }}
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
spec:
  params:
    - name: ref
      description: Git reference
    - name: repourl
      description: repository url from github payload
    - name: repofullname
      description: full name user-org/reponame from github
    - name: revision
      description: commit head unique id
      type: string
    - name: revision-type
      description: revision type
      type: string
    - name: revision-name
      description: revision name
      type: string
    - name: author
      description: revision commit author username
    - name: VERSION
      description: The version of nodejs
      default: {{ .Values.application.runtime }}
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: {{ .Values.pipeline.build.s2i.context }}
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "false"
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:

{{ if (.Values.pipeline.nexus.host) }}
    - name: image-generate
      image: quay.io/openshift-pipeline/s2i
      command: ['s2i', 'build', '.', 'image-registry.openshift-image-registry.svc:5000/openshift/{{ .Values.application.runtime }}', '--as-dockerfile', '/gen-source/Dockerfile.gen', '--env', 'HTTPS_PROXY={{ .Values.pipeline.nexus.host }}']
      workingDir: /workspace/source/{{ .Values.pipeline.build.s2i.context }}
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source  
{{ else }}
    - name: image-generate
      image: quay.io/openshift-pipeline/s2i
      command: ['s2i', 'build', '.', 'image-registry.openshift-image-registry.svc:5000/openshift/{{ .Values.application.runtime }}', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      workingDir: /workspace/source/{{ .Values.pipeline.build.s2i.context }}
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
{{ end }}
          
    - name: image-build
      image: quay.io/buildah/stable
      workingDir: /workspace/source/{{ .Values.pipeline.build.s2i.context }}
      command: ['buildah', 'bud', '--tls-verify=$(inputs.params.TLSVERIFY)', '--layers', '-f', 'Dockerfile', '-t', '{{ .Values.application.environments.development }}/$(outputs.resources.image.url):$(inputs.params.revision-name)', '.']
      resources: {}
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
      securityContext:
        privileged: true

    - name: image-push
      image: quay.io/buildah/stable
      command: ['buildah', 'push', '--tls-verify=$(inputs.params.TLSVERIFY)', '{{ .Values.application.environments.development }}/$(outputs.resources.image.url):$(inputs.params.revision-name)', 'docker://{{ .Values.application.environments.development }}/$(outputs.resources.image.url):$(inputs.params.revision-name)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      resources: {}
      securityContext:
        privileged: true
    # todo: label image properly
    # - name: image-verify
    #   image: quay.io/openshift/origin-cli:latest
    #   workingDir: /workspace/source
    #   command: ["/bin/bash", "-c"]
    #   args:
    #     - |-
    #     # oc get imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) -n {{ .Values.application.environments.development }}
    #     # oc label imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) --overwrite -n {{ .Values.application.environments.development }} app.kubernetes.io/name={{ .Values.application.name }}
    #     # oc label imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) --overwrite -n {{ .Values.application.environments.development }} app.revision-type=$(inputs.params.revision-type)
    #     # oc label imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) --overwrite -n {{ .Values.application.environments.development }} app.revision-name=$(inputs.params.revision-name)          
    #     # oc label imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) --overwrite -n {{ .Values.application.environments.development }} app.revision-author=$(inputs.params.author)

  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}