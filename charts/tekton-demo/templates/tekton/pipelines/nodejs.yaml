apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: {{ .Values.pipeline.name }}
  namespace: {{ .Values.application.environments.cicd }}
  labels:
    app: {{ .Values.application.name }}
spec:
  resources:
    - name: nodejs-git
      type: git
    - name: nodejs-image-development
      type: image
    - name: nodejs-image-production
      type: image

  workspaces:
    - name: shared-workspace
    - name: upload
    - name: release-notes
    
  params:
    - name: ref
      description: Ref of the application
    - name: revision
      description: git unique head commit id
    - name: repofullname
      description: repository full name
    - name: author
      description: commit author
    - name: message
      description: commit message
    - name: APP_NAME
      description: The name of the application
      default: {{ .Values.application.name }}
    - name: APP_VERSION
      description: The version of the application
      default: {{ .Values.application.version }}
    - name: AUTHORS_API_KEY
      description: The OCP secret that contains DB credentials
      default: 'authors-secret-api'
    - name: DEPLOY_PROJECT
      description: The project where you deploy the app
      default: {{ .Values.application.environments.development }}
    - name: PROMOTE_PROJECT
      description: The project where you deploy the app
      default: {{ .Values.application.environments.production }}

  tasks:

    - name: status
      taskRef:
        kind: Task
        name: status
      resources:       
        inputs:
          - name: source
            resource: nodejs-git
      params:
      - name: ref
        value: $(params.ref)
      - name: revision
        value: $(params.revision)
      - name: author
        value: $(params.author)
      - name: message
        value: $(params.message)

    # - name: github-pending
    #   taskRef:
    #     kind: Task
    #     name: github-set-status
    #   runAfter:
    #     - status
    #   params:
    #   - name: REPO_FULL_NAME
    #     value: $(params.repofullname)
    #   - name: SHA
    #     value: $(params.revision)
    #   - name: DESCRIPTION
    #     value: "Build has started ($(params.message))"
    #   - name: STATE
    #     value: pending
    #   - name: TARGET_URL
    #     value: https://tekton/dashboard/taskrun/log

    # - name: fetch-repo
    #   taskRef:
    #     name: git-clone
    #   runAfter: 
    #     - status
    #   workspaces:
    #   - name: output
    #     workspace: shared-workspace
    #   params:
    #   - name: url
    #     value: {{ .Values.application.from.git.url }}
    #   - name: revision
    #     value: $(tasks.status.results.revision-name)
    # - name: cat-readme
    #   runAfter: ["fetch-repo"]  # Wait until the clone is done before reading the readme.
    #   workspaces:
    #   - name: source
    #     workspace: shared-workspace
    #   taskSpec:
    #     workspaces:
    #     - name: source
    #     steps:
    #     - image: zshusers/zsh:4.3.15
    #       script: |
    #         #!/usr/bin/env zsh
    #         cat $(workspaces.source.path)/README.md

    # upgrada to task 0.1 from tkn/catalog
    # - name: fetch-repo
    #   taskRef:
    #     name: git-clone
    #   runAfter:
    #     - status
    #   workspaces:
    #     - name: output
    #       workspace: shared-workspace
    #   params:
    #     - name: url
    #       value: {{ .Values.application.from.git.url }}
    #     - name: subdirectory
    #       value: ""
    #     - name: deleteExisting
    #       value: "true"

    - name: build
      taskRef:
        name: s2i-nodejs
      runAfter:
        - status
      params:
        - name: ref
          value: $(tasks.status.results.ref)
        - name: revision
          value: $(tasks.status.results.revision)
        - name: revision-type
          value: $(tasks.status.results.revision-type)
        - name: revision-name
          value: $(tasks.status.results.revision-name)
        - name: author
          value: $(tasks.status.results.revision-name)
      resources:       
        inputs:
          - name: source
            resource: nodejs-git
        outputs:
          - name: image
            resource: nodejs-image-development
            # todo: versioning here

    # - conditions:
    #     - conditionRef: is-feature-branch
    #       params:
    #         - name: "revision-type"
    #           value: "$(tasks.status.results.revision-type)"

    - name: deploy
      taskRef:
        name: deploy-nodejs-app
      runAfter:
        - build
        # - github-pending
        # todo: if PR send pending/building status to github
      params:
        - name: ref
          value: $(tasks.status.results.ref)
        - name: revision
          value: $(tasks.status.results.revision)
        - name: revision-type
          value: $(tasks.status.results.revision-type)
        - name: revision-name
          value: $(tasks.status.results.revision-name)
        - name: author
          value: $(tasks.status.results.author)
        - name: APP_NAME
          value: "$(params.APP_NAME)"
        - name: APP_VERSION
          value: "$(params.APP_VERSION)"  
        - name: AUTHORS_API_KEY
          value: "$(params.AUTHORS_API_KEY)"
        - name: DEPLOY_PROJECT
          value: "$(params.DEPLOY_PROJECT)"    
      resources:
        inputs:
          - name: image
            resource: nodejs-image-development

    #
    # todo: implement quality gate here
    - name: test
      taskRef:
        name: test-nodejs-app
      runAfter:
        - deploy
      params:
        - name: ref
          value: $(tasks.status.results.ref)
        - name: revision
          value: $(tasks.status.results.revision)
        - name: revision-type
          value: $(tasks.status.results.revision-type)
        - name: revision-name
          value: $(tasks.status.results.revision-name)

    # todo: upgrade based on semantic versioning principles
    # only minor supported and patch
    # develop       : deploys to dev development environment with commit hash tagged
    # feature/test  : does not deploy to development environment
    # release/1.0.0 : rolls out slowly to canary/production
    # hotfix/1.0.1  : imediately deployment to canary/production
    # patch/1.0.2   : imediately deployment to canary/production (can be a patch to a small subset of pods only)
    # pr/1          : build, test and report back to pr

    ## todo: test github release creation
    ## maybe create a PR instead first
    # - name: create-github-release
    #   taskRef:
    #     name: create-github-release
    #   params:
    #     - name: TAG
    #       value: "$(tasks.status.results.revision-name)"
    #     - name: REVISION
    #       value: "$(tasks.status.results.revision-type)"
    #     - name: RELEASE_FILE_NAME
    #       value: release.md
    #   runAfter:
    #     - test
    #   workspaces:
    #     - name: source
    #       workspace: shared-workspace
    #     - name: input
    #       workspace: upload
    #     - name: release-notes
    #       workspace: release-notes

    - name: promote
      taskRef:
        name: promote-nodejs-app
      runAfter:
        - test
      params:
        - name: ref
          value: $(tasks.status.results.ref)
        - name: revision
          value: $(tasks.status.results.revision)
        - name: revision-type
          value: $(tasks.status.results.revision-type)
        - name: revision-name
          value: $(tasks.status.results.revision-name)
        - name: APP_NAME
          value: $(params.APP_NAME)
        - name: APP_VERSION
          value: $(params.APP_VERSION)
        - name: AUTHORS_API_KEY
          value: $(params.AUTHORS_API_KEY)
        - name: DEPLOY_PROJECT
          value: $(params.DEPLOY_PROJECT)
        - name: PROMOTE_PROJECT
          value: $(params.PROMOTE_PROJECT)
      resources:
        inputs:
          - name: image
            resource: nodejs-image-development
            # todo: versioning development here
        outputs:
          - name: image
            resource: nodejs-image-production
            # todo: versioning production here