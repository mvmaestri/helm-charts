apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: status
  namespace: {{ .Values.application.environments.cicd }}
spec:
  params:
    - name: ref
      type: string
    - name: revision
      type: string
    - name: repourl
      type: string
    - name: repofullname
      type: string
    - name: author
      type: string
    - name: message
      type: string
  resources:
    inputs:
      - name: source
        type: git
  results:
    - name: ref
      description: reference
    - name: revision
      description: unique id from git head commit
    - name: repourl
      description: repository url from github payload
    - name: repofullname
      description: full name user-org/reponame from github
    - name: revision-type
      description: Contains the type of branch - feature, release,...
    - name: revision-name
      description: Contains the name of the branch without the type, ie. omitting the first slash
    - name: full-revision-name
      description: Contains the name of the branch without the type, ie. omitting the first slash
    - name: message
      description: Contains the commit message
    - name: author
      description: Contains the author username
  steps:
    - name: variables
      image: quay.io/openshift/origin-cli:latest
      resources: {}
      workingDir: /workspace/source
      script: |
        #!/bin/sh
        echo $(params.ref)
        echo $(params.revision)
        echo $(params.author)
        echo $(params.message)
        echo $(params.ref) > /tekton/results/ref
        echo $(params.revision) | sed 's/ *$//g' > /tekton/results/revision
        echo $(params.author) > /tekton/results/author
        echo $(params.message) > /tekton/results/message
        echo $(params.repourl) > /tekton/results/repourl
        echo $(params.repofullname) > /tekton/results/repofullname
        echo $(params.ref) | awk -F "/" '{if (NF > 1) {printf "%s", $3 > "/tekton/results/revision-type"; printf "%s", $4 > "/tekton/results/revision-name"; printf "%s/%s", $3, $4 > "/tekton/results/full-revision-name"} else {printf "%s", "unknown" > "/tekton/results/revision-type"; printf "%s", $3 > "/tekton/results/revision-name"; printf "%s", $4 > "/tekton/results/full-revision-name"}}'
        echo "Revision-type:" $(cat /tekton/results/revision-type)
        echo "Revision-name:" $(cat /tekton/results/revision-name)

    # - name: load-test
    #   image: ubi8/nodejs-10
    #   workingDir: /workspace/source/{{ .Values.application.from.git.s2i.context }}
    #   script: |
    #     #!/bin/bash
    #     DURATION=60       # how long should load be applied ? - in seconds
    #     TPS=20            # number of requests per second
    #     end=$((SECONDS+$DURATION))
    #     #start load
    #     while [ $SECONDS -lt $end ];
    #     do
    #       for ((i=1;i<=$TPS;i++)); do
    #               curl -X POST http://release-1-1-0-nodejs-tekton-production.apps.s45.core.rht-labs.com/ -H 'Accept: application/json' -H 'Authorization: Bearer xxxxxxxxxxxxx' -H 'Content-Type: application/json' -d '{}' -o /dev/null -s -w '%{time_starttransfer}\n' >> response-times.log &
    #       done
    #       sleep 1
    #     done
    #     wait
    #     #end load
    #     echo Load times $(cat response-times.log)
    #     echo "Load test has been completed"

    # - name: validate
    #   image: ubi8/nodejs-10
    #   resources: {}
    #   workingDir: /workspace/source
    #   script: |
    #     #!/bin/sh
    #     ref=$(cat /tekton/results/ref)
    #     revisionType=$(cat /tekton/results/revision-type)
    #     revisionName=$(cat /tekton/results/revision-name)
    #     package={{ .Values.application.from.git.s2i.context }}/package.json
    #     git fetch --all --tags > /dev/null 2>&1
    #     if git rev-parse -q --verify "refs/tags/$revisionName" >/dev/null; then
    #         echo "Tag $revisionName already exists"
    #         exit 1
    #     fi

    #     if [ ! -f $package ]; then
    #         echo "Missing package.json"
    #         exit 1 
    #     fi

    #     # verify if it's not a tag webhook event
    #     if [[ $ref == *"refs/tags/"* ]]; then
    #       echo "This is a tag commit. Not building."
    #       exit 1
    #     fi

    #     if [ "$revisionType" == "release" ] || [ "$revisionType" = "hotfix" ] || [ "$revisionType" = "patch" ] || [ "$revisionType" == "feature" ] || [ "$revisionType" = "develop" ]; then
    #       exit 0
    #     else
    #       echo "Branch $revisionType is not supported as part of git flow implementation"
    #       exit 1
    #     fi

    #     echo OK


    # - name: debug
    #   image: ubi8/nodejs-10
    #   workingDir: /workspace/source/{{ .Values.application.from.git.s2i.context }}
    #   command: ["/bin/bash", "-c"]
    #   args:
    #     - |-
    #       set -ex
    #       find /workspace/source/{{ .Values.application.from.git.s2i.context }}

    # good for debugging
    # - name: pause
    #   image: docker
    #   args: ["sleep", "30000"]