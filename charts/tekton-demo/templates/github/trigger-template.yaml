{{ $application := default dict .Values.application }}
{{ $pipeline := default dict .Values.pipeline }}
{{ $repositories := default dict .Values.repositories }}
{{- if .Values.repositories }}
{{- range $repo := .Values.repositories }}
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: {{ $application.name }}-{{ $repo.id }}-trigger-template
  namespace: {{ $application.environments.cicd }}
spec:
  # description: >-
  #   This `task` consumes data from the trigger binding file and fires a new pipelinerun with a pipeline as reference.
  params:
  - name: ref
    description: git reference or branch name
  - name: revision
    description: The revision of your git repository
  - name: revision-short
    description: sha truncated to 7
  - name: revision-type
    description: revision type
  - name: revision-name
    description: revision name or version 
  - name: revision-alias
    description: compatible with names (replaced . to -)
  - name: repourl
    description: The url of your git repository
  - name: reponame
    description: The name of your git repository
  - name: repofullname
    description: The full name of your git repository
  - name: message
    description: commit message
  - name: author
    description: commit author username
  - name: email
    description: commit author email
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: $(params.revision-type)-$(params.revision-alias)-$(params.revision-short)-$(params.author)-
      namespace: {{ $application.environments.cicd }}
      labels:
        webhooks.tekton.dev/repo: $(params.reponame)
        webhooks.tekton.dev/author: $(params.author)
        webhooks.tekton.dev/revision: $(params.revision-short)
        webhooks.tekton.dev/revision-type: $(params.revision-type)
      annotations:
        argocd.argoproj.io/compare-options: IgnoreExtraneous
    spec:
      serviceAccountName: {{ $pipeline.sa.triggers }}
      workspaces:
        {{- range $r := $repositories }}
        - name: {{ $application.name }}-{{ $r.id }}-source
          persistentVolumeClaim:
            claimName: {{ $application.name }}-{{ $r.id }}-pvc
        {{- end }}
        - name: {{ $application.name }}-shared
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 1Gi
      params:
        - name: ref
          value: $(params.ref)
        - name: revision
          value: $(params.revision)
        - name: revision-short
          value: $(params.revision-short)
        - name: revision-type
          value: $(params.revision-type)
        - name: revision-name
          value: $(params.revision-name)
        - name: revision-alias
          value: $(params.revision-alias)
        - name: author
          value: $(params.author)
        - name: email
          value: $(params.email)
        - name: message
          value: $(params.message)
        - name: repourl
          value: $(params.repourl)
        - name: reponame
          value: $(params.reponame)
        - name: repofullname
          value: $(params.repofullname)
      pipelineRef:
        name: {{ $application.name }}
      resources:
        - name: {{ $application.name }}-git
          resourceSpec:
            type: git
            params:
              - name: url
                value: $(params.repourl)
              - name: revision
                value: $(params.revision)
{{- end }}
{{- end }}