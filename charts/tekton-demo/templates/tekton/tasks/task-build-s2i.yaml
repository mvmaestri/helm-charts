apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: s2i-nodejs
  namespace: {{ .Values.application.environments.cicd }}
spec:
  params:
    - name: ref
      description: Git reference
    - name: repourl
      description: repository url from github payload
    - name: repofullname
      description: full name user-org/reponame from github
    - name: revision
      description: commit head unique id
      type: string
    - name: revision-type
      description: revision type
      type: string
    - name: revision-name
      description: revision name
      type: string
    - name: author
      description: revision commit author username
    - name: VERSION
      description: The version of nodejs
      default: {{ .Values.application.runtime }}
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: {{ .Values.application.from.git.s2i.context }}
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "false"
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - name: update-github
      env:
        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.pipeline.webhook.github.secret }}
              key: token

      image: registry.access.redhat.com/ubi8/ubi:latest
      script: |
        #!/usr/libexec/platform-python
        import json
        import os
        import http.client
        status_url = """/repos/$(params.repofullname)/statuses/$(params.revision)"""

        data = {
            "state": "pending",
            "target_url": "{{ .Values.pipeline.webhook.host }}",
            "description": "Building",
            "context": "tekton"
        }
        conn = http.client.HTTPSConnection("api.github.com")
        r = conn.request(
            "POST",
            status_url.rstrip("\n"),
            body=json.dumps(data),
            headers={
                "User-Agent": "TektonCD, the peaceful cat",
                "Authorization": "Bearer " + os.environ["GITHUBTOKEN"],
            })
        resp = conn.getresponse()
        if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print(resp.read())
            # sys.exit(resp.read())
        else:
          print("GitHub status 'pending' has been set")
    
    - name: validate
      image: ubi8/nodejs-10
      resources: {}
      workingDir: /workspace/source/{{ .Values.application.from.git.s2i.context }}
      script: |
        #!/bin/sh
        if [ "$(params.revision-type)" == "release" ]; then
          before=$(cat package.json \
          | grep version \
          | head -1 \
          | awk -F: '{ print $2 }' \
          | sed 's/[",]//g')
          
          before=$(echo -e $before)
          version=$(npm version minor)
          echo "Upgraded to $version"

          if [ "$version" = "v$(params.revision-name)" ]; then
            echo Version is OK
            exit 0
          else
            echo "Version from package.json ($before) does not match with branch $(params.revision-type)/$(params.revision-name)"
            exit 1
          fi

        elif [ "$(params.revision-type)" == "patch" ] || [ "$(params.revision-type)" = "hotfix" ]; then
          if [ "$(npm version patch)" = "v$(params.revision-name)" ]; then
            echo "Version from package.json upgraded to v$version"
          else
            echo "Version from package.json ($before) does not match with branch $(params.revision-type)/$(params.revision-name)"
            exit 1 
          fi
        else
          echo "Skipping npm version upgrade since we are in a $(params.revision-type) branch"
          exit 0
        fi
        
      securityContext:
        runAsUser: 0 # might not be the best option

    - name: lint-test-audit
      image: ubi8/nodejs-10
      resources: {}
      workingDir: /workspace/source/{{ .Values.application.from.git.s2i.context }}
      script: |
        #!/bin/sh
        npm install --only-dev
        npm run lint
        run run unit-test
        npm audit
      securityContext:
        runAsUser: 0 # todo: here, might not be the best option

    # todo: unit here
    - name: image-generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: /workspace/source
      command: ['s2i', 'build', '{{ .Values.application.from.git.s2i.context }}', 'image-registry.openshift-image-registry.svc:5000/openshift/{{ .Values.application.runtime }}', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source   

    - name: image-build
      image: quay.io/buildah/stable
      workingDir: /workspace/source/{{ .Values.application.from.git.s2i.context }}
      command: ['buildah', 'bud', '--tls-verify=$(inputs.params.TLSVERIFY)', '--layers', '-f', 'Dockerfile', '-t', '$(outputs.resources.image.url):$(inputs.params.revision-name)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
      resources: {}
      securityContext:
        privileged: true

    - name: image-push
      image: quay.io/buildah/stable
      command: ['buildah', 'push', '--tls-verify=$(inputs.params.TLSVERIFY)', '$(outputs.resources.image.url):$(inputs.params.revision-name)', 'docker://$(outputs.resources.image.url):$(inputs.params.revision-name)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      resources: {}
      securityContext:
        privileged: true

    # todo: label image properly
    - name: image-verify
      image: quay.io/openshift/origin-cli:latest
      workingDir: /workspace/source
      command: ["/bin/bash", "-c"]
      args:
        - |-
          oc get imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) -n {{ .Values.application.environments.development }}
    
        # oc label imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) --overwrite -n {{ .Values.application.environments.development }} app.kubernetes.io/name={{ .Values.application.name }}
        # oc label imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) --overwrite -n {{ .Values.application.environments.development }} app.revision-type=$(inputs.params.revision-type)
        # oc label imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) --overwrite -n {{ .Values.application.environments.development }} app.revision-name=$(inputs.params.revision-name)          
        # oc label imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) --overwrite -n {{ .Values.application.environments.development }} app.revision-author=$(inputs.params.author)

  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}