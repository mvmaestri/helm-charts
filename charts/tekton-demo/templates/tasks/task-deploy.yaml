{{ $application := default dict .Values.application }}
{{ $cluster := default dict .Values.cluster }}
{{- if .Values.repositories }}
{{- range $repo := .Values.repositories }}
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: {{ $repo.id }}-deploy
  namespace: {{ $application.environments.cicd }}
spec:
  params:
    - name: cluster
      description: cluster app url
      type: string
    - name: image
      description: full path of the image
      type: string
    - name: image-path
      description: image to be deployed
      type: string
    - name: revision-short
      description: git unique head commit id short version
      type: string
    - name: revision-type
      description: revision type usually branch type
      type: string
    - name: revision-name
      description: revision name usually version or branch name
      type: string
  results:
    - name: deployment
      description: deployment name
    - name: hostname
      description: hostname of the deployed application
  steps:
    - name: app-create
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/sh
        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then
          replace=$(inputs.params.revision-name)
          revisionName=${replace//./-}
          appname={{ $repo.id }}-$(inputs.params.revision-type)-$revisionName
          hostname={{ $repo.id }}-$(inputs.params.revision-type)-$revisionName-{{ $application.environments.development }}.{{ $cluster }}
          printf %s "$appname" > /tekton/results/deployment
          printf %s "$hostname" > /tekton/results/hostname

          if [ "$(inputs.params.revision-type)" == "develop" ]; then
            # overwrite develop name structure
            appname={{ $repo.id }}-$revisionName
            hostname=$revisionName-{{ $repo.id }}-{{ $application.environments.development }}.{{ $cluster }}
            printf %s "$appname" > /tekton/results/deployment
            printf %s "$hostname" > /tekton/results/hostname
          fi

          oc get deployment/$(cat /tekton/results/deployment) -n {{ $application.environments.development }}
          if [[ $? -ne 0 ]]; then
            # oc new-app --name=$(cat /tekton/results/deployment) -i={{ $application.name }}-development:$(inputs.params.revision-name) --namespace={{ $application.environments.development }} --labels=app.name={{ $application.name }}
            echo Deploying image $(params.image)
            oc new-app --name=$(cat /tekton/results/deployment) -i=$(params.image-path) --namespace={{ $application.environments.development }} --labels=app.name={{ $application.name }}
          else
            echo "Application already exists."
            # oc tag {{ $application.environments.development }}/{{ $application.name }}-development:$(inputs.params.revision-name) {{ $application.environments.development }}/{{ $application.name }}-development:$(inputs.params.revision-name)
          fi

        else
          echo "Branch type $(inputs.params.revision-type) does not deploy to development"
          exit 0
        fi

    # - name: app-docs
    #   image: registry.redhat.io/openshift4/ose-cli:latest
    #   script: |
    #     #!/bin/sh
    #     if [ "$(inputs.params.revision-type)" == "develop" ]; then
    #       replace=$(inputs.params.revision-name)
    #       revisionName=${replace//./-}
    #       appname={{ $application.name }}-documentation

    #       oc get deployment/$appname -n {{ $application.environments.development }}
    #       if [[ $? -ne 0 ]]; then
    #         oc new-app --name=$appname -i={{ $application.name }}-documentation:$(inputs.params.revision-name) --namespace={{ $application.environments.development }} --labels=app.name={{ $application.name }}
    #       else
    #         echo "Application already exists."
    #       fi

    #     else
    #       echo "Skipping. Only develop deploys documentation"
    #       exit 0
    #     fi

    - name: app-expose
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/sh
          
        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then
          # documentation development route
          # documentation={{ $application.name }}-documentation-{{ $application.environments.development }}.{{ $cluster }}
          # # oc get route/{{ $application.name }}-documentation -n {{ $application.environments.development }}
          # if [[ $? -ne 0 ]]; then
          #   echo "Exposing"
          #   oc create route edge --service {{ $application.name }}-documentation --port 8080 --hostname $documentation -n {{ $application.environments.development }}
          # else
          #   echo "Documentation is already exposed."
          #   echo $documentation
          #   echo ""
          # fi
      
          oc get svc/$(cat /tekton/results/deployment) -n {{ $application.environments.development }}
          if [[ $? -ne 0 ]]; then
            echo "Exposing"
            oc expose svc/$(cat /tekton/results/deployment) -n {{ $application.environments.development }}
          else
            echo "Application is already exposed."
            echo $(cat /tekton/results/hostname)
            echo ""
          fi

          oc get route/$(cat /tekton/results/deployment) -n {{ $application.environments.development }}
          if [[ $? -ne 0 ]]; then
            echo "Creating routes"
            oc create route edge --service $(cat /tekton/results/deployment) --port 8080 --hostname $(cat /tekton/results/hostname) -n {{ $application.environments.development }}
            sleep 5
            oc patch svc/$(cat /tekton/results/deployment) -p '{ "spec": {"type":"LoadBalancer"}}, { "ports": [ { "name": "gw", "protocol": "TCP", "port": 8080,"targetPort": 8080 } ] } }' -n {{ $application.environments.development }}
          else
            echo ""
            echo "Route is already available."
            echo $(cat /tekton/results/hostname)
          fi
        else
          echo "Branch type $(inputs.params.revision-type) does not deploy to development"
          exit 0
        fi

    - name: app-labels
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/sh
        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then
          echo test
        else
          echo "Branch type $(inputs.params.revision-type) does not deploy to development"
          exit 0
        fi

    - name: app-envs
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/sh
        replace=$(inputs.params.revision-name)
        revisionName=${replace//./-}
        environment={{ $application.environments.development }}
        
        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then

          if [ "$(inputs.params.revision-type)" == "develop" ]; then
            oc set env deployment/$(cat /tekton/results/deployment) --overwrite version=$(inputs.params.revision-short) -n $environment
          else
            oc set env deployment/$(cat /tekton/results/deployment) --overwrite revision-id=$(inputs.params.revision-short) -n $environment
            oc set env deployment/$(cat /tekton/results/deployment) --overwrite revision-name=$revisionName -n $environment
          fi
          
          oc set env deployment/$(cat /tekton/results/deployment) --overwrite environment=development -n $environment
          oc set env deployment/$(cat /tekton/results/deployment) --overwrite revision-type=$(inputs.params.revision-type) -n $environment
          oc set env deployment/$(cat /tekton/results/deployment) --list -n $environment

        else
          echo "Branch type $(inputs.params.revision-type) does not deploy to development"
          exit 0
        fi

    - name: app-probes
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/sh
        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then

          replace=$(inputs.params.revision-name)
          revisionName=${replace//./-}

          oc set probe deployment/$(cat /tekton/results/deployment) --remove --readiness --liveness -n {{ $application.environments.development }}
          oc set probe deployment/$(cat /tekton/results/deployment) --readiness --get-url=http://:8080/ --initial-delay-seconds=30 -n {{ $application.environments.development }}

        else
          echo "Branch type $(inputs.params.revision-type) does not deploy to development"
          exit 0
        fi

    {{- if not $repo.tasks.deploy.skip.autoscale }}
    - name: app-autoscale
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/sh

        replace=$(inputs.params.revision-name)
        revisionName=${replace//./-}

        if [ "$(inputs.params.revision-type)" == "develop" ]; then
          min=1
          max=10
          threshold=50
        elif [ "$(inputs.params.revision-type)" == "feature" ]; then
          min=1
          max=2
          threshold=75
        fi

        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then

          oc get hpa $(cat /tekton/results/deployment) -n {{ $application.environments.development }}
          if [[ $? -ne 0 ]]; then
            oc autoscale deployment $(cat /tekton/results/deployment) \
              --min $min --max $max --cpu-percent=$threshold \
              --namespace {{ $application.environments.development }}
          else
            echo "Application autoscale is already configured."
          fi
        fi
    {{- end }}

    - name: app-triggers
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/sh
        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then
          oc set triggers deployment/$(cat /tekton/results/deployment) -n {{ $application.environments.development }}
        else
          echo "Branch type $(inputs.params.revision-type) does not deploy to development"
          exit 0
        fi

{{- end }}
{{- end }}