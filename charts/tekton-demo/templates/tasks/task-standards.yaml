{{ $application := default dict .Values.application }}
{{ $pipeline := default dict .Values.pipeline }}
{{ $repositories := default dict .Values.repositories }}
{{- if .Values.repositories }}
{{- range $repo := .Values.repositories }}
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: {{ $repo.id }}-standards
  namespace: {{ $application.environments.cicd }}
spec:
  workspaces:
    - name: {{ $repo.id }}-source
    - name: shared
  params:
    - name: runtime
      description: runtime image to run standards
      type: string
    - name: context
      description: working dir context
      type: string
  steps:

  {{- if not $repo.tasks.standards.skip.helm }}
    - name: helm-lint
      image: $(inputs.params.runtime)
      resources: {}
      workingDir: /workspace/{{ $repo.id }}-source/$(inputs.params.context)
      script: |
        #!/bin/sh
        if [ -d "chart" ]; then
          /workspace/shared/helm lint chart
          /workspace/shared/helm template -f chart/values.yaml chart
        else
          echo "Chart does not exist"
          exit 0
        fi
      securityContext:
        runAsUser: 0
  {{- end }}

  {{- if not $repo.tasks.standards.skip.dependencies }}
    - name: code-prepare
      image: $(inputs.params.runtime)
      resources: {}
      workingDir: /workspace/{{ $repo.id }}-source/$(inputs.params.context)
      script: |
        #!/bin/sh
        npm ping --registry {{ $pipeline.nexus.host }}
        if [[ $? -ne 0 ]]; then
          npm install --only-dev --unsafe-perm=true --allow-root
        else
          echo Using nexus
          npm --registry {{ $pipeline.nexus.host }} install --only-dev --unsafe-perm=true --allow-root
        fi
      securityContext:
        runAsUser: 0
  {{- end }}

  {{- if not $repo.tasks.standards.skip.audit }}
    - name: code-audit
      image: $(inputs.params.runtime)
      resources: {}
      workingDir: /workspace/{{ $repo.id }}-source/$(inputs.params.context)
      command: ["/bin/bash", "-c"]
      args:
        - |-
          npm audit
      securityContext:
        runAsUser: 0
  {{- end }}

  {{- if not $repo.tasks.standards.skip.lint }}
    - name: code-lint
      image: $(inputs.params.runtime)
      resources: {}
      workingDir: /workspace/{{ $repo.id }}-source/$(inputs.params.context)
      command: ["/bin/bash", "-c"]
      args:
        - |-
          npm run lint
      securityContext:
        runAsUser: 0
  {{- end }}

  {{- if not $repo.tasks.standards.skip.unit }}
    - name: code-test
      image: $(inputs.params.runtime)
      resources: {}
      workingDir: /workspace/{{ $repo.id }}-source/$(inputs.params.context)
      script: |
        #!/bin/sh
        if [[ $(npm run | grep "^  test-unit" | wc -l) == "1" ]]; then
          npm run test-unit
        else
          echo "Not implemented (npm run test-unit)"
        fi
      securityContext:
        runAsUser: 0
  {{- end }}

  {{- if not $repo.tasks.standards.skip.coverage }}
    - name: code-coverage
      image: $(inputs.params.runtime)
      resources: {}
      workingDir: /workspace/{{ $repo.id }}-source/$(inputs.params.context)
      script: |
        #!/bin/sh
        if [[ $(npm run | grep "^  coverage" | wc -l) == "1" ]]; then
          npm run coverage
        else
          echo "Not implemented (npm run coverage)"
        fi
      securityContext:
        runAsUser: 0
  {{- end }}

  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

{{- end }}
{{- end }}