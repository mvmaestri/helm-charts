{{ $application := default dict .Values.application }}
{{ $cluster := default dict .Values.cluster }}
{{- if .Values.repositories }}
{{- range $repo := .Values.repositories }}
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: {{ $repo.id }}-promote
  namespace: {{ $application.environments.cicd }}
spec:
  workspaces:
    - name: {{ $repo.id }}-source
    - name: shared
  params:
    - name: cluster
      description: cluster app url
      type: string
    - name: ref
      description: git ref
      type: string
    - name: repofullname
      type: string
    - name: revision
      description: git unique head commit id
      type: string
    - name: revision-short
      description: git unique head commit id short version
      type: string
    - name: revision-type
      description: revision type usually branch type
      type: string
    - name: revision-name
      description: revision name usually version or branch name
      type: string
    - name: author
      type: string
    - name: email
      type: string
    - name: image-path
      type: string
  results:
    - name: deployment
      description: deployment name
    - name: hostname
      description: hostname of the deployed application
    - name: image-path
      description: path of production ready image

  steps:
    # todo: use when expressions when available
    - name: validate
      image: registry.redhat.io/openshift4/ose-cli:latest
      resources: {}
      script: |
        #!/bin/sh
        replace=$(inputs.params.revision-name)
        revisionName=${replace//./-}
        revisionType=$(params.revision-type)
        appname={{ $repo.id }}-$(inputs.params.revision-type)-$revisionName
        hostname={{ $repo.id }}-$(inputs.params.revision-type)-$revisionName-{{ $application.environments.production }}.{{ $cluster }}
        promote={{ $application.environments.production }}/{{ $repo.id }}:$(inputs.params.revision-name)
        printf %s "$appname" >> /tekton/results/deployment
        printf %s "$hostname" >> /tekton/results/hostname
        printf %s "$promote" >> /tekton/results/image-path
        
        if [ "$revisionType" == "release" ] || [ "$revisionType" = "hotfix" ] || [ "$revisionType" = "patch" ]; then
          echo OK
          exit 0
        else
          echo "Preventing $revisionType to be promoted to a production environment"
          exit 1
        fi


    {{- if not $repo.tasks.promote.skip.tag }}
    - name: release-notes
      image: {{ $repo.tasks.build.runtime }}
      workingDir: /workspace/source/{{ $repo.tasks.build.context }}
      script: |
        #!/bin/sh

        ls -ls

        before=$(cat package.json \
        | grep version \
        | head -1 \
        | awk -F: '{ print $2 }' \
        | sed 's/[",]//g')        
        before=$(echo -e $before)

        git config --global user.name "$(params.author)"
        git config --global user.email "$(params.email)"

        git fetch --all --tags > /dev/null 2>&1
        git checkout -b $(params.revision-type)/$(params.revision-name) > /dev/null 2>&1
        git log master..$(params.revision-type)/$(params.revision-name) --oneline --no-merges --decorate > release-v$(params.revision-name).md > /dev/null 2>&1
        
        # hack for first version to be upgraded as major
        if [ "$before" == "0.0.0" ]; then
          npm version major > /dev/null 2>&1
        else
          npm version minor > /dev/null 2>&1
        fi

        git add release-v$(params.revision-name).md
        git add package.json
        git commit -m "Including release notes"
        git tag -a $(params.revision-name) -m "Upgrade to v$(params.revision-name)"
        git push origin $(params.revision-type)/$(params.revision-name) --tags
      securityContext:
        runAsUser: 0
    {{- end }}

    - name: release-image
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/sh

        oc tag $(params.image-path) $(cat /tekton/results/promote)
        oc tag $(cat /tekton/results/promote) $(cat /tekton/results/promote)
        oc get deployment/$(cat /tekton/results/deployment) -n {{ $application.environments.production }}
        if [[ $? -ne 0 ]]
        then
            oc new-app --name=$(cat /tekton/results/deployment) -i=$(cat /tekton/results/promote) --namespace={{ $application.environments.production }} --labels=app.name={{ $application.name }}
        else
            echo "Application already exists."
        fi

    - name: app-expose
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/sh        
        sleep 10
        oc get svc/$(cat /tekton/results/deployment) -n {{ $application.environments.production }}
        if [[ $? -ne 0 ]]; then
          echo "Exposing"
          oc expose svc/$(cat /tekton/results/deployment) -n {{ $application.environments.production }}
        else
          echo "Application is already exposed."
          echo $(cat /tekton/results/hostname)
        fi

        sleep 10
        
        oc get route/$(cat /tekton/results/deployment) -n {{ $application.environments.production }}
        if [[ $? -ne 0 ]]; then
          echo "Creating routes"
          oc create route edge --service $(cat /tekton/results/deployment) --port 8080 --hostname $(cat /tekton/results/hostname) -n {{ $application.environments.production }}
          sleep 5
          oc patch svc/$(cat /tekton/results/deployment) -p '{ "spec": {"type":"LoadBalancer"}}, { "ports": [ { "name": "gw", "protocol": "TCP", "port": 8080,"targetPort": 8080 } ] } }' -n {{ $application.environments.production }}
        else
          echo "Route is already available."
          echo $(cat /tekton/results/hostname)
        fi

    - name: app-labels
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/sh
        replace=$(inputs.params.revision-name)
        revisionName=${replace//./-}
        environment={{ $application.environments.production }}
        oc label deployment/$(cat /tekton/results/deployment) --overwrite app.kubernetes.io/name=$(cat /tekton/results/deployment) -n $environment
        oc label deployment/$(cat /tekton/results/deployment) --overwrite app.version=$revisionName -n $environment
        oc label deployment/$(cat /tekton/results/deployment) --overwrite app.revision-id=$(inputs.params.revision-short) -n $environment
        oc label deployment/$(cat /tekton/results/deployment) --overwrite app.revision-type=$(inputs.params.revision-type) -n $environment
        oc label deployment/$(cat /tekton/results/deployment) --overwrite app.revision-name=$revisionName -n $environment
        oc label deployment/$(cat /tekton/results/deployment) --overwrite app.revision-author=$(inputs.params.author) -n $environment

    - name: app-envs
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/sh
        replace=$(inputs.params.revision-name)
        revisionName=${replace//./-}
        environment={{ $application.environments.production }}
        oc set env deployment/$(cat /tekton/results/deployment) --list -n $environment
        oc set env deployment/$(cat /tekton/results/deployment) --overwrite environment=production -n $environment
        oc set env deployment/$(cat /tekton/results/deployment) --overwrite version=$(inputs.params.revision-name) -n $environment
        oc set env deployment/$(cat /tekton/results/deployment) --overwrite revision-id=$(inputs.params.revision-short) -n $environment
        oc set env deployment/$(cat /tekton/results/deployment) --overwrite revision-name=$revisionName -n $environment
        oc set env deployment/$(cat /tekton/results/deployment) --overwrite revision-type=$(inputs.params.revision-type) -n $environment

    - name: app-secrets
      image: registry.redhat.io/openshift4/ose-cli:latest
      command: ["/bin/bash", "-c"]
      args:
        - |-
          # example
          # oc set env deployment/$(cat /tekton/results/deployment) --from secret/input -n {{ $application.environments.production }}

    - name: app-probes
      image: registry.redhat.io/openshift4/ose-cli:latest
      command: ["/bin/bash", "-c"]
      args:
        - |-
          oc set probe deployment/$(cat /tekton/results/deployment) --remove --readiness --liveness -n {{ $application.environments.production }}
          oc set probe deployment/$(cat /tekton/results/deployment) --readiness --get-url=http://:8080/ --initial-delay-seconds=30 -n {{ $application.environments.production }}

  {{- if not $repo.tasks.promote.skip.autoscale }}
    - name: app-autoscale
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/sh
        min=1
        max=10
        threshold=50

        oc get hpa $(cat /tekton/results/deployment) -n {{ $application.environments.production }}
        if [[ $? -ne 0 ]]; then
          oc autoscale deployment $(cat /tekton/results/deployment) \
            --min $min --max $max --cpu-percent=$threshold \
            --namespace {{ $application.environments.production }}
        else
          echo "Application autoscale is already configured."
        fi
  {{- end }}

    - name: app-triggers
      image: registry.redhat.io/openshift4/ose-cli:latest
      command: ["/bin/bash", "-c"]
      args:
        - |-
          oc set triggers deployment/$(cat /tekton/results/deployment) -n {{ $application.environments.production }}

  {{- if not $repo.tasks.promote.skip.report }}
    - name: report
      image: registry.redhat.io/ubi8/ubi:latest
      env:
        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              name: {{ $repo.secret }}
              key: password
      script: |
        #!/usr/libexec/platform-python
        import json
        import os
        import http.client
        status_url = """/repos/$(params.repofullname)/statuses/$(params.revision)"""

        data = {
            "state": "success",
            "target_url": "https://replaceme",
            "description": "Building",
            "context": "tekton"
        }
        conn = http.client.HTTPSConnection("api.github.com")
        r = conn.request(
            "POST",
            status_url.rstrip("\n"),
            body=json.dumps(data),
            headers={
                "User-Agent": "TektonCD, the peaceful cat",
                "Authorization": "Bearer " + os.environ["GITHUBTOKEN"],
            })
        resp = conn.getresponse()
        if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print(resp.read())
            # sys.exit(resp.read())
        else:
          print("GitHub status 'success' has been set")
    {{- end }}

  {{- end }}
  {{- end }}