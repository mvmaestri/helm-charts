{{ $application := default dict .Values.application }}
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-agnostic
  namespace: {{ $application.environments.cicd }}
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
spec:
  params:
    - name: runtime
      description: runtime image to install dependencies
      type: string
    - name: command
      description: command to be executed to build the source code
      type: string
    - name: context
      description: working dir
      type: string
    - name: revision-name
      description: revision name
      type: string
    - name: repo-id
      description: repo id
      type: string
  workspaces:
    - name: source

  results:
  - name: image
    description: url of the image just built
  - name: image-path
    description: url of the image just built without the registry
    
  steps:

    - name: image-command
      image: $(params.runtime)
      workingDir: /workspace/source/$(params.context)
      resources: {}
      script: |
        #!/bin/sh
        command=$(echo -e $(params.command))
        if [ "$command" == "false" ]; then
          echo Not specified
        else
          echo Executing $command
          $(inputs.params.command)
        fi
      securityContext:
        runAsUser: 0

    - name: image-build
      image: registry.redhat.io/rhel8/buildah
      workingDir: /workspace/source/$(inputs.params.context)
      resources: {}
      script: |
        #!/bin/sh
        ls -ls
        registry=image-registry.openshift-image-registry.svc:5000
        path={{ $application.environments.development }}/$(params.repo-id):$(params.revision-name)
        image=$registry/$path
        buildah bud --tls-verify=false --layers -f Dockerfile -t $image .
        printf %s "$image" >> /tekton/results/image
        printf %s "$path" >> /tekton/results/image-path
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      securityContext:
        privileged: true

    - name: image-push
      image: registry.redhat.io/rhel8/buildah
      resources: {}
      script: |
        #!/bin/sh
        ls -ls
        echo $(cat /tekton/results/image)
        buildah push --tls-verify=false $(cat /tekton/results/image) docker://$(cat /tekton/results/image)
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      resources: {}
      securityContext:
        privileged: true

  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}