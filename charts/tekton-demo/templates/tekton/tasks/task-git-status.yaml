apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: status
  namespace: {{ .Values.application.environments.cicd }}
spec:
  params:
    - name: ref
      type: string
    - name: revision
      type: string
    - name: repourl
      type: string
    - name: repofullname
      type: string
    - name: author
      type: string
    - name: message
      type: string
  resources:
    inputs:
      - name: source
        type: git
  results:
    - name: ref
      description: reference
    - name: revision
      description: unique id from git head commit
    - name: repourl
      description: repository url from github payload
    - name: repofullname
      description: full name user-org/reponame from github
    - name: revision-type
      description: Contains the type of branch - feature, release,...
    - name: revision-name
      description: Contains the name of the branch without the type, ie. omitting the first slash
    - name: full-revision-name
      description: Contains the name of the branch without the type, ie. omitting the first slash
    - name: message
      description: Contains the commit message
    - name: author
      description: Contains the author username
  steps:
    - name: git
      image: quay.io/openshift/origin-cli:latest
      resources: {}
      workingDir: /workspace/source
      script: |
        #!/bin/sh
        echo $(params.ref)
        echo $(params.revision)
        echo $(params.author)
        echo $(params.message)
        echo $(params.ref) > /tekton/results/ref
        echo $(params.revision) | sed 's/ *$//g' > /tekton/results/revision
        echo $(params.author) > /tekton/results/author
        echo $(params.message) > /tekton/results/message
        echo $(params.repourl) > /tekton/results/repourl
        echo $(params.repofullname) > /tekton/results/repofullname
        echo $(params.ref) | awk -F "/" '{if (NF > 1) {printf "%s", $3 > "/tekton/results/revision-type"; printf "%s", $4 > "/tekton/results/revision-name"; printf "%s/%s", $3, $4 > "/tekton/results/full-revision-name"} else {printf "%s", "unknown" > "/tekton/results/revision-type"; printf "%s", $3 > "/tekton/results/revision-name"; printf "%s", $4 > "/tekton/results/full-revision-name"}}'
        echo "Revision-type:" $(cat /tekton/results/revision-type)
        echo "Revision-name:" $(cat /tekton/results/revision-name)

    - name: validate
      image: ubi8/nodejs-10
      resources: {}
      workingDir: /workspace/source
      script: |
        #!/bin/sh

        package={{ .Values.application.from.git.s2i.context }}/package.json

        if [ ! -f $package ]; then
            echo "Missing package.json"
            exit 1 
        fi

        version=$(cat $package \
        | grep version \
        | head -1 \
        | awk -F: '{ print $2 }' \
        | sed 's/[",]//g')

        revisionType=$(cat /tekton/results/revision-type)
        revisionName=$(cat /tekton/results/revision-name)

        if [ "$revisionType" == "release" ] || [ "$revisionType" = "hotfix" ] || [ "$revisionType" = "patch" ]; then
          echo "Validation here"
          echo "App version: $version"
          exit 1
        elif [ "$revisionType" == "feature" ] || [ "$revisionType" = "develop" ]; then
          echo "Working in a $revisionType branch"
        else
          echo "Branch $revisionType is not part of git flow implementation"
          exit 1
        fi
        exit 0

    - name: debug
      image: ubi8/nodejs-10
      workingDir: /workspace/source/{{ .Values.application.from.git.s2i.context }}
      command: ["/bin/bash", "-c"]
      args:
        - |-
          set -ex
          find /workspace/source/{{ .Values.application.from.git.s2i.context }}

    # good for debugging
    # - name: pause
    #   image: docker
    #   args: ["sleep", "30000"]