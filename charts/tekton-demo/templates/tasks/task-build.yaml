apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build
  namespace: {{ .Values.application.environments.cicd }}
spec:
  params:
    - name: ref
      description: Git reference
    - name: repourl
      description: repository url from github payload
    - name: repofullname
      description: full name user-org/reponame from github
    - name: revision
      description: commit head unique id
      type: string
    - name: revision-type
      description: revision type
      type: string
    - name: revision-name
      description: revision name
      type: string
    - name: author
      description: revision commit author username
    - name: VERSION
      description: The version of nodejs
      default: {{ .Values.application.runtime }}
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: {{ .Values.application.from.git.s2i.context }}
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "false"
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:    
    - name: image-generate
      workingdir: /workspace/source
      image: quay.io/openshift-pipeline/s2i
      command: ['s2i', 'build', '{{ .Values.application.from.git.s2i.context }}', 'image-registry.openshift-image-registry.svc:5000/openshift/{{ .Values.application.runtime }}', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source   

    - name: image-build
      image: quay.io/buildah/stable
      workingDir: /workspace/source/{{ .Values.application.from.git.s2i.context }}
      command: ['buildah', 'bud', '--tls-verify=$(inputs.params.TLSVERIFY)', '--layers', '-f', 'Dockerfile', '-t', '$(outputs.resources.image.url):$(inputs.params.revision-name)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
      resources: {}
      securityContext:
        privileged: true

    - name: image-push
      image: quay.io/buildah/stable
      command: ['buildah', 'push', '--tls-verify=$(inputs.params.TLSVERIFY)', '$(outputs.resources.image.url):$(inputs.params.revision-name)', 'docker://$(outputs.resources.image.url):$(inputs.params.revision-name)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      resources: {}
      securityContext:
        privileged: true

    # todo: label image properly
    - name: image-verify
      image: quay.io/openshift/origin-cli:latest
      workingDir: /workspace/source
      command: ["/bin/bash", "-c"]
      args:
        - |-
          oc get imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) -n {{ .Values.application.environments.development }}
    
        # oc label imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) --overwrite -n {{ .Values.application.environments.development }} app.kubernetes.io/name={{ .Values.application.name }}
        # oc label imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) --overwrite -n {{ .Values.application.environments.development }} app.revision-type=$(inputs.params.revision-type)
        # oc label imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) --overwrite -n {{ .Values.application.environments.development }} app.revision-name=$(inputs.params.revision-name)          
        # oc label imagestreamtag/{{ .Values.application.name }}:$(inputs.params.revision-name) --overwrite -n {{ .Values.application.environments.development }} app.revision-author=$(inputs.params.author)

  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}