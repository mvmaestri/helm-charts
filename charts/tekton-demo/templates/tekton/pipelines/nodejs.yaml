apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: {{ .Values.pipeline.name }}
  namespace: {{ .Values.application.environments.cicd }}
  labels:
    app: {{ .Values.application.name }}
spec:
  resources:
    - name: nodejs-git
      type: git
    - name: nodejs-image-development
      type: image
    - name: nodejs-image-production
      type: image

  workspaces:
    - name: shared-workspace
    - name: upload
    - name: release-notes
    
  params:
    # - name: run-id
    #   description: pipeline run name
    #   default: $(context.pipelineRun.uid)
    - name: ref
      description: Ref of the application
    - name: revision
      description: git unique head commit id
    - name: repourl
      description: repository full name
    - name: repofullname
      description: repository full name
    - name: author
      description: commit author username
    - name: email
      description: commit author email
    - name: message
      description: commit message
    - name: APP_NAME
      description: The name of the application
      default: {{ .Values.application.name }}
    - name: APP_VERSION
      description: The version of the application
      default: {{ .Values.application.version }}
    - name: AUTHORS_API_KEY
      description: The OCP secret that contains DB credentials
      default: 'authors-secret-api'
    - name: DEPLOY_PROJECT
      description: The project where you deploy the app
      default: {{ .Values.application.environments.development }}
    - name: PROMOTE_PROJECT
      description: The project where you deploy the app
      default: {{ .Values.application.environments.production }}

  tasks:
    - name: info
      taskRef:
        kind: Task
        name: status
      resources:       
        inputs:
          - name: source
            resource: nodejs-git
      params:
      # - name: run-id
      #   value: $(params.run-id)
      - name: ref
        value: $(params.ref)
      - name: repourl
        value: $(params.repourl)
      - name: repofullname
        value: $(params.repofullname)
      - name: revision
        value: $(params.revision)
      - name: author
        value: $(params.author)
      - name: message
        value: $(params.message)

    - name: build
      taskRef:
        name: nodejs-build
      runAfter:
        - info
      params:
        - name: ref
          value: $(tasks.info.results.ref)
        - name: repourl
          value: $(params.repourl)
        - name: repofullname
          value: $(params.repofullname)
        - name: revision
          value: $(tasks.info.results.revision)
        - name: revision-type
          value: $(tasks.info.results.revision-type)
        - name: revision-name
          value: $(tasks.info.results.revision-name)
        - name: author
          value: $(tasks.info.results.author)
      resources:       
        inputs:
          - name: source
            resource: nodejs-git
        outputs:
          - name: image
            resource: nodejs-image-development

    - name: deploy
      # conditions:
      #   - conditionRef: is-feature-branch
      #     params:
      #       - name: revision-type
      #         value: $(tasks.info.results.revision-type)
      taskRef:
        name: deploy-nodejs-app
      runAfter:
        - build
      params:
        - name: cluster
          value: $(tasks.info.results.cluster)
        - name: ref
          value: $(tasks.info.results.ref)
        - name: revision
          value: $(tasks.info.results.revision)
        - name: revision-short
          value: $(tasks.info.results.revision-short)
        - name: revision-type
          value: $(tasks.info.results.revision-type)
        - name: revision-name
          value: $(tasks.info.results.revision-name)
        - name: author
          value: $(tasks.info.results.author)
        - name: AUTHORS_API_KEY
          value: "$(params.AUTHORS_API_KEY)"
      resources:
        inputs:
          - name: image
            resource: nodejs-image-development

    - name: test
      taskRef:
        name: test-nodejs-app
      runAfter:
        - deploy
      params:
      - name: ref
        value: $(params.ref)
      - name: repourl
        value: $(params.repourl)
      - name: repofullname
        value: $(params.repofullname)
      - name: revision
        value: $(params.revision)
      - name: revision-type
        value: $(tasks.info.results.revision-type)
      - name: revision-name
        value: $(tasks.info.results.revision-name)
      resources:
        inputs:
          - name: source
            resource: nodejs-git

    # todo: upgrade based on semantic versioning principles
    # only minor supported and patch
    # develop       : deploys to dev development environment with commit hash tagged
    # feature/test  : does not deploy to development environment
    # release/1.0.0 : rolls out slowly to canary/production
    # hotfix/1.0.1  : imediately deployment to canary/production
    # patch/1.0.2   : imediately deployment to canary/production (can be a patch to a small subset of pods only)
    # pr/1          : build, test and report back to pr

    - name: promote
      taskRef:
        name: promote-nodejs-app
      runAfter:
        - test
      params:
      - name: cluster
        value: $(tasks.info.results.cluster)
      - name: ref
        value: $(tasks.info.results.ref)
      - name: revision
        value: $(tasks.info.results.revision)
      - name: revision-short
        value: $(tasks.info.results.revision-short)
      - name: revision-type
        value: $(tasks.info.results.revision-type)
      - name: revision-name
        value: $(tasks.info.results.revision-name)
      - name: author
        value: $(params.author)
      - name: email
        value: $(params.email)
      - name: APP_NAME
        value: $(params.APP_NAME)
      - name: APP_VERSION
        value: $(params.APP_VERSION)
      - name: AUTHORS_API_KEY
        value: $(params.AUTHORS_API_KEY)
      - name: DEPLOY_PROJECT
        value: $(params.DEPLOY_PROJECT)
      - name: PROMOTE_PROJECT
        value: $(params.PROMOTE_PROJECT)
      resources:
        inputs:
          - name: source
            resource: nodejs-git
          - name: image
            resource: nodejs-image-development
        outputs:
          - name: image
            resource: nodejs-image-production

    - name: release
      taskRef:
        kind: Task
        name: tag
      runAfter:
        - promote
      params:
      - name: author
        value: $(params.author)
      - name: email
        value: $(params.email)
      - name: revision-type
        value: $(tasks.info.results.revision-type)
      - name: revision-name
        value: $(tasks.info.results.revision-name)
      resources:
        inputs:
          - name: source
            resource: nodejs-git